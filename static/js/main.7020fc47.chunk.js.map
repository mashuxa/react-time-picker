{"version":3,"sources":["reducer.js","constants.js","containers/TimePicker/index.js","actions.js","serviceWorker.js","index.js"],"names":["initialState","startHours","startMinutes","endHours","endMinutes","state","action","type","Object","assign","payload","ROOT_CLASS","TimePicker","props","store","onChange","subscribe","getState","timePickerReducer","this","count","step","callback","selectedItem","cells","i","selectedClass","push","className","key","onClick","e","Fragment","getCells","setStartHours","aria-disabled","setStartMinutes","setEndHours","setEndMinutes","isFilled","validate","React","Component","connect","dispatch","hours","minutes","Boolean","window","location","hostname","match","createStore","combineReducers","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7020fc47.chunk.js","sourcesContent":["const initialState = {\n    startHours: '',\n    startMinutes: '',\n    endHours: '',\n    endMinutes: '',\n};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case 'SET_START_HOURS':\n            return Object.assign({}, state, {\n                startHours: action.payload,\n            });\n\n        case 'SET_START_MINUTES':\n            return Object.assign({}, state, {\n                startMinutes: action.payload,\n            });\n\n        case 'SET_END_HOURS':\n            return Object.assign({}, state, {\n                endHours: action.payload,\n            });\n\n        case 'SET_END_MINUTES':\n            return Object.assign({}, state, {\n                endMinutes: action.payload,\n            });\n\n        default:\n            return state;\n    }\n}\n","export const ROOT_CLASS = 'time-picker';\n","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport {setStartHours, setStartMinutes, setEndHours, setEndMinutes,} from \"../../actions\";\nimport {ROOT_CLASS} from \"../../constants\";\nimport './styles/style.scss';\n\nclass TimePicker extends React.Component {\n  constructor(props) {\n    super(props);\n\n    props.store && typeof props.onChange === 'function' && props.store.subscribe(() => {\n      props.onChange(props.store.getState().timePickerReducer);\n    });\n  }\n\n  isFilled() {\n    return this.props.startHours !== '' && this.props.startMinutes !== '' && this.props.endHours !== '' && this.props.endMinutes !== '';\n  }\n\n  validate() {\n    return this.props.endHours * 60 + this.props.endMinutes >= this.props.startHours * 60 + this.props.startMinutes;\n  }\n\n  getCells(count, step, callback, selectedItem) {\n    const cells = [];\n\n    for (let i = 0; i < count; i += step) {\n      const selectedClass = selectedItem === i ? `${ROOT_CLASS}__cell--selected` : '';\n\n      cells.push(<div className={`${ROOT_CLASS}__cell ${selectedClass}`} key={i} onClick={(e) => {\n        callback(i)\n      }}>{i}</div>);\n    }\n\n    return cells;\n  }\n\n  render() {\n    return <React.Fragment>\n      <section className={`${ROOT_CLASS}__col`}>\n        <h2 className={`${ROOT_CLASS}__title`}>\n          {`Start time: ${this.props.startHours !== '' ? this.props.startHours : '--'}:${this.props.startMinutes !== '' ? this.props.startMinutes : '--'}`}\n        </h2>\n        <div className={`${ROOT_CLASS}__wrapper`}>\n          <div className={`${ROOT_CLASS}__cell-wrapper`}>\n            {this.getCells(24, 1, this.props.setStartHours, this.props.startHours)}\n          </div>\n          <div className={`${ROOT_CLASS}__cell-wrapper`} aria-disabled={this.props.startHours === ''}>\n            {this.getCells(60, 5, this.props.setStartMinutes, this.props.startMinutes)}\n          </div>\n        </div>\n      </section>\n      <section className={`${ROOT_CLASS}__col`}>\n        <h2 className={`${ROOT_CLASS}__title`}>\n          {`End time: ${this.props.endHours !== '' ? this.props.endHours : '--'}:${this.props.endMinutes !== '' ? this.props.endMinutes : '--'}`}\n        </h2>\n        <div className={`${ROOT_CLASS}__wrapper`}>\n          <div className={`${ROOT_CLASS}__cell-wrapper`}>\n            {this.getCells(24, 1, this.props.setEndHours, this.props.endHours)}\n          </div>\n          <div className={`${ROOT_CLASS}__cell-wrapper`} aria-disabled={this.props.endHours === ''}>\n            {this.getCells(60, 5, this.props.setEndMinutes, this.props.endMinutes)}\n          </div>\n        </div>\n      </section>\n      {this.isFilled() && !this.validate() &&\n      <div className={`${ROOT_CLASS}__error`}>End date should be greater or equal than start date</div>}\n    </React.Fragment>;\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    startHours: state.timePickerReducer.startHours,\n    startMinutes: state.timePickerReducer.startMinutes,\n    endHours: state.timePickerReducer.endHours,\n    endMinutes: state.timePickerReducer.endMinutes,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setStartHours: (hours) => dispatch(setStartHours(hours)),\n    setStartMinutes: (minutes) => dispatch(setStartMinutes(minutes)),\n    setEndHours: (hours) => dispatch(setEndHours(hours)),\n    setEndMinutes: (minutes) => dispatch(setEndMinutes(minutes)),\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TimePicker);\n","export function setStartHours(params) {\n    return {\n        type: 'SET_START_HOURS',\n        payload: params\n    }\n}\n\nexport function setStartMinutes(params) {\n    return {\n        type: 'SET_START_MINUTES',\n        payload: params\n    }\n}\n\nexport function setEndHours(params) {\n    return {\n        type: 'SET_END_HOURS',\n        payload: params\n    }\n}\n\nexport function setEndMinutes(params) {\n    return {\n        type: 'SET_END_MINUTES',\n        payload: params\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. TimePicker is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {createStore} from 'redux';\nimport {Provider} from 'react-redux';\nimport {combineReducers} from \"redux\";\nimport timePickerReducer from './reducer';\nimport TimePicker from './containers/TimePicker';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(combineReducers({timePickerReducer}));\n\n/**\n * Date picker\n *\n * @returns {component}\n * @param date\n */\n\nReactDOM.render(\n    <Provider store={store}>\n        <TimePicker onChange={''} store={store} />\n    </Provider>,\n    document.getElementById('react-time-picker'));\n\nserviceWorker.unregister();\n\nexport {TimePicker, timePickerReducer};\n"],"sourceRoot":""}